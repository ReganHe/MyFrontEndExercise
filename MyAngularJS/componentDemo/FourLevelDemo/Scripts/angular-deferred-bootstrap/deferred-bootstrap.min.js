"use strict";function addLoadingClass(){bodyElement.addClass(loadingClass)}function removeBodyClasses(){bodyElement.removeClass(loadingClass);bodyElement.removeClass(errorClass)}function addErrorClass(){removeBodyClasses();bodyElement.addClass(errorClass)}function isPromise(n){return isObject(n)&&isFunction(n.then)}function checkConfig(n){if(!isObject(n))throw new Error("Bootstrap configuration must be an object.");if(!isString(n.module))throw new Error("'config.module' must be a string.");if(n.resolve&&n.moduleResolves)throw new Error("Bootstrap configuration can contain either 'resolve' or 'moduleResolves' but not both");if(n.resolve&&!isObject(n.resolve))throw new Error("'config.resolve' must be an object.");if(n.bootstrapConfig&&!isObject(n.bootstrapConfig))throw new Error("'config.bootstrapConfig' must be an object.");if(n.moduleResolves&&!isArray(n.moduleResolves))throw new Error("'config.moduleResolves' must be an array.");if(forEach(n.moduleResolves,function(n){if(!n.module)throw new Error("A 'moduleResolve' configuration item must contain a 'module' name.");if(!isObject(n.resolve))throw new Error("'moduleResolve.resolve' must be an object.");}),angular.isDefined(n.onError)&&!isFunction(n.onError))throw new Error("'config.onError' must be a function.");}function provideRootElement(n,t){t=angular.element(t);n.unshift(["$provide",function(n){n.value("$rootElement",t)}])}function createInjector(n,t){var i=["ng"];return isString(n)?i.push(n):isArray(n)&&(i=i.concat(n)),provideRootElement(i,t),angular.injector(i,t)}function doBootstrap(n,t,i){var r=$q.defer();return angular.element(document).ready(function(){angular.bootstrap(n,[t],i);removeBodyClasses();r.resolve(!0)}),r.promise}function bootstrap(n){function o(n,t,u){var o;if(r.push({name:t,moduleName:u||f}),!isFunction(n)&&!isArray(n))throw new Error("Resolve for '"+t+"' is not a valid dependency injection format.");if(o=i.instantiate(n),isPromise(o))e.push(o);else throw new Error("Resolve function for '"+t+"' must return a promise.");}function c(n){return forEach(n,function(n,t){var i=n&&n.data?n.data:n,u=r[t].moduleName,f=r[t].name;angular.module(u).constant(f,i)}),doBootstrap(u,f,h)}function l(n){if(addErrorClass(),isFunction(t.onError))t.onError(n)}var t=n||{},u=t.element,f=t.module,s=t.injectorModules||[],i,e=[],r=[],h=t.bootstrapConfig;return bodyElement=angular.element(document.body),addLoadingClass(),checkConfig(t),i=createInjector(s,u),$q=i.get("$q"),t.moduleResolves?forEach(t.moduleResolves,function(n,i){forEach(n.resolve,function(n,r){o(n,r,t.moduleResolves[i].module)})}):forEach(t.resolve,function(n,t){o(n,t)}),$q.all(e).then(c,l)}var isObject=angular.isObject,isFunction=angular.isFunction,isArray=angular.isArray,isString=angular.isString,forEach=angular.forEach,loadingClass="deferred-bootstrap-loading",errorClass="deferred-bootstrap-error",bodyElement,$q;window.deferredBootstrapper={bootstrap:bootstrap};
//# sourceMappingURL=deferred-bootstrap.min.js.map
